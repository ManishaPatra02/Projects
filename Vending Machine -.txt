Design :-

module vending_machine(
    output reg can_despatch,
    input [1:0] coin,
    input clk, rst
);

    reg [1:0] state, next_state;

    parameter s0 = 2'd0, s5 = 2'd1, s10 = 2'd2, s15 = 2'd3;

    always @(posedge clk) begin
        if (rst)
            state <= s0;
        else
            state <= next_state;
    end

    always @(state, coin) begin
        case (state)
            s0: begin
                if (coin == 2'b01)
                    next_state = s5;
                else if (coin == 2'b10)
                    next_state = s10;
                else
                    next_state = s0;
            end

            s5: begin
                if (coin == 2'b01)
                    next_state = s10;
                else if (coin == 2'b10)
                    next_state = s15;
                else
                    next_state = s5;
            end

            s10: begin
                if (coin == 2'b01)
                    next_state = s15;
                else if (coin == 2'b10)
                    next_state = s15; // No residual coin
                else
                    next_state = s10;
            end

            s15: begin
                next_state = s0; // After can is dispensed, reset to s0
            end

            default: next_state = s0;
        endcase
    end

    assign can_despatch = (state == s15) ? 1 : 0;

endmodule


Testbench :-

module tb;
    reg clk, rst;
    wire can_despatch;
    reg [1:0] coin_stack [0:5], coin;
    integer i;

    vending_machine uut (
        .can_despatch(can_despatch),
        .clk(clk),
        .coin(coin),
        .rst(rst)
    );

    initial begin
        $monitor("i=%0d, Time=%0t, coin=%b, can_despatch=%b", i, $time, coin, can_despatch);
        $dumpfile("vending_machine.vcd");
        $dumpvars(1, tb);

        clk = 0;
        rst = 1;
        i = 0;

        #50 rst = 0;

        coin_stack[0] = 2'b00; // no rupee
        coin_stack[1] = 2'b01; // 5 rupee
        coin_stack[2] = 2'b10; // 10 rupee
        coin_stack[3] = 2'b01; // 5 rupee
        coin_stack[4] = 2'b10; // 10 rupee
        coin_stack[5] = 2'b00; // 0 rupee
    end

    always #10 clk = ~clk;

    always @(posedge clk) begin
        coin = coin_stack[i];
        i = i + 1;
        if (i == 6) $finish;
    end
endmodule
